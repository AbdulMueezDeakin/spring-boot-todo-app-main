
pipeline {
    agent any
    tools {
      maven '3.9.6'
      jdk 'JDK 17'
     }
     environment{
        DOCKER_IMAGE = "spring-boot-todo-app-main"
        //DataTog
     }
    stages {
        stage('Build') {
            steps {
                // Build Spring Boot application
                 script {
                    sh 'mvn clean package'
                    archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
                    //archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
                }
            }
            post {
                success {
                    echo 'Build succeeded'
                }
                failure {
                    echo 'Build failed'
                }
            }
        }
        stage('Test') {
            steps {
               sh 'mvn test'
            }
             post {
                success {
                    echo 'Test Run successfully'
                }
                failure {
                    echo 'Test Run Failed'
                }
            }
        }
       stage('Code Quality Analysis') {
            steps {
                echo 'mvn sonar:sonar'
                //withSonarQubeEnv('SonarQube') {
                 //   sh 'mvn clean verify sonar:sonar \
                  //      -Dsonar.projectKey=spring-boot-todo-app-main \
                 //       -Dsonar.projectName="spring-boot-todo-app-main" \
                 //       -Dsonar.host.url=http://localhost:9000 \
                //        -Dsonar.token=squ_b12e071c4c637dcf0acdf3224d221f7495ecf20d'
                //}
            }

       }
        stage('Build Image') {
            steps {
                  script {
                    // Build the Docker image
                    sh 'sudo apt-get install -y docker.io'
                    docker.build(env.DOCKER_IMAGE)
  //                  sh 'docker build -t todo-app .'

                    // Stop and remove any existing container
/*                    sh '''
                    if [ $(docker ps -q -f name=todo-app) ]; then
                        docker stop todo-app
                    fi
                    if [ $(docker ps -aq -f name=todo-app) ]; then
                        docker rm todo-app
                    fi
                    '''
*/
                    // Run the Docker container
                   // sh 'docker run -d -p 8282:8282 --name todo-app todo-app'
                }
            }
            post {
                success {
                    echo 'Deployment succeeded'
                }
                failure {
                    echo 'Deployment failed'
                }
            }
        }
        stage('Deploy'){
            steps {
                  script {
               sh '''
                        docker-compose down
                        docker-compose up -d --build
                '''
                  }
            }
        }
        stage('Release') {
            steps {
                // Promote application to production environment (if applicable)
                // Example: sh 'kubectl apply -f deployment.yaml'
                  echo 'release'
            }
        }
        stage('Monitoring and Alerting') {
            steps {
                // Set up monitoring and alerting (if applicable)
                // Example: sh 'configure-datadog'
                echo 'Monitoring and Alerting'
            }
        }
    }
}
