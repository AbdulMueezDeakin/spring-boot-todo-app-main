
pipeline {
    agent any
    tools {
      maven '3.9.6'
     }
     environment{
        DOCKER_IMAGE = "spring-boot-todo-app-main:latest"
     }
    stages {
        stage('Build') {
            steps {
                // Build Spring Boot application
                 script {
                    bat 'mvn clean package'
                    bat 'java --version'
                    bat 'docker --version' 
                    archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
                    //archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
                }
            }
            post {
                success {
                    echo 'Build succeeded'
                }
                failure {
                    echo 'Build failed'
                }
            }
        }
        stage('Test') {
            steps {
               bat 'mvn test'
            }
             post {
                success {
                    echo 'Test Run successfully'
                }
                failure {
                    echo 'Test Run Failed'
                }
            }
        }
       stage('Code Quality Analysis') {
            steps {
                echo 'mvn sonar:sonar'
                withSonarQubeEnv('sonarqube') {
                    bat 'mvn clean verify sonar:sonar \
                        -Dsonar.projectKey=spring-boot-todo-app-main \
                        -Dsonar.projectName="spring-boot-todo-app-main" \
                        -Dsonar.host.url=http://localhost:9000 \
                        -Dsonar.token=squ_b0128a6a5b76568ce79bfb878358f3db76bb45a2'
                }
            }

       }
     stage('Build Docker Image') {
             steps {
              script{
                   bat 'docker build -t spring-boot-todo-app-main:latest .'
              } 
            }
         post {
                success {
                    echo 'Docker Image Build successfully'
                }
                failure {
                    echo 'Docker Image Build Failed'
                }
            }
       }
     stage('Deploy'){
             steps {
                   script {
                bat '''
                        docker-compose down
                        docker-compose up -d --build
                 '''
                  }
            }
        }
    }

}
