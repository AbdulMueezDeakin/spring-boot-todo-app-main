
pipeline {
    agent any
    tools {
        maven '3.9.6'
    }
    environment {
        DOCKER_IMAGE = 'spring-boot-todo-app-main:latest'
        DATADOG_API_KEY = credentials('data_dog')
    }
    stages {
        stage('Build') { // step 4  Build stage
            steps {
                script {
                    bat 'mvn clean package'
                    archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
                }
            }
            post {
                success {
                    echo 'Build succeeded'
                }
                failure {
                    echo 'Build failed'
                }
            }
        }
        stage('Test') { // step 5  Test stage
            steps {
                bat 'mvn test'
            }
            post {
                success {
                    echo 'Test Run successfully'
                }
                failure {
                    echo 'Test Run Failed'
                }
            }
        }
        stage('Code Quality Analysis') { // step 6  Code Quality Analysis
            steps {
                echo 'mvn sonar:sonar'
                withSonarQubeEnv('sonarqube') {
                    bat 'mvn clean verify sonar:sonar \
                        -Dsonar.projectKey=spring-boot-todo-app-main \
                        -Dsonar.projectName="spring-boot-todo-app-main" \
                        -Dsonar.host.url=http://localhost:9000 \
                        -Dsonar.token=squ_b0128a6a5b76568ce79bfb878358f3db76bb45a2'
                }
            }
            post {
                success {
                    echo 'Code Quality Analysis done successfully'
                }
                failure {
                    echo 'Code Quality Analysis Failed'
                }
            }
        }
        stage('Building Docker Image') {
            steps {
                script {
                    bat 'docker build -t spring-boot-todo-app-main:latest .'
                }
            }
            post {
                success {
                    echo 'Docker Image Build successfully'
                }
                failure {
                    echo 'Docker Image Build Failed'
                }
            }
        }
        stage('Deploy to staging server') { // step 7 Deploying Application to staging Envirnment
            steps {
                bat 'docker-compose down'
                bat 'docker-compose up -d --build'
            }
            post {
                success {
                    echo 'Deployed to staging server server successfully'
                }
                failure {
                    echo 'Deployed to staging server server Failed'
                }
            }

        }

        stage('Monitoring and Alerting') {// step 9 Monitoring and Alerting
            steps {
                bat '''
                    curl -X POST "https://api.datadoghq.com/api/v1/events" ^
                        -H "Content-Type: application/json" ^
                        -H "DD-API-KEY: %DATADOG_API_KEY%" ^
                        -d "{\\"title\\": \\"Deployment Successful\\", \\"text\\": \\"The application has been successfully deployed.\\", \\"alert_type\\": \\"success\\"}"
                '''
                script {
                    def command = '''java -javaagent:C:\\Users\\abdul\\Downloads\\dd-java-agent.jar ^
                        -Ddd.env=testing3 ^
                        -Ddd.logs.injection=true ^
                        -jar target\\spring-boot-todo-app-0.0.1-SNAPSHOT.jar'''

                    try {
                        timeout(time: 3, unit: 'MINUTES') {
                            bat label: 'Run Java Application', script: command, background: true
                        }
                    } catch (err) {
                    // Catch timeout error but do nothing
                    }
                }
                post {
                success {
                    echo 'Monitoring and Alerting successfully'
                }
                failure {
                    echo 'Monitoring and Alerting Failed'
                }
            }
                
            }
        }
    }

}
